// == == == == [ Дефайны ] == == == ==

#define GetPlayerAccountID(%0)	pInfo[%0][pID] 	
#define IsPlayerLogged(%0)	pInfo[%0][pLogged]	

//== == == == [ Переменные ] == == == ==

new credit_money[MAX_PLAYERS],
    credit_data[MAX_PLAYERS],
    e_credits_loaded;

//== == == == [ Информация игрока ] == == == ==

enum player
{
	pID,
	pName[MAX_PLAYER_NAME+1],
	pPass[32+1],
	pEmail[46+1],
	pReferal[MAX_PLAYER_NAME+1],
	pDateReg[10+1],
	pNations,
	pAge,
	pSex,
	pSkin,
	pMoney,
	pLevel,
	pCredit,
	pBank,
	bool: pLogged
}
new pInfo[MAX_PLAYERS][player];

//== == == == [ Информация о кредитах ] == == == ==

enum credit
{
	crID, 
	crUid,      
	crName[24],
	crSt_time,
	crEnd_time,
	crSum, 
	crAmount,
	crStatus
}
#define MAX_CR_INFO                  50
new crInfo[MAX_CR_INFO][credit];

// == == == == == == == ==

public OnGameModeInit()
{
   LoadCredits();
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;
	
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;
		
		playerid = idx;
		break;
	}
	return playerid;
}

stock LoadCredits()
{
	mysql_query(dbHandle, "SELECT * FROM `credits` WHERE 1");
	e_credits_loaded = cache_num_rows();

    if(e_credits_loaded)
    {
		for(new i; i < e_credits_loaded; i++)
		{

			crInfo[i][crID] = cache_get_field_content_int(i, "id");
			crInfo[i][crUid] = cache_get_field_content_int(i, "uid");
			cache_get_field_content(i, "name", crInfo[i][crName], dbHandle, 24);
			crInfo[i][crSt_time] = cache_get_field_content_int(i, "start_time");
			crInfo[i][crEnd_time] = cache_get_field_content_int(i, "end_time");
			crInfo[i][crSum] = cache_get_field_content_int(i, "sum");
			crInfo[i][crAmount] = cache_get_field_content_int(i, "amount");
			crInfo[i][crStatus] = cache_get_field_content_int(i, "status");
		}
	}
	printf("[Кредиты]: Кредитов загружено: %d", e_credits_loaded);
}


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new len = strlen(inputtext),
	    val = strval(inputtext);
	switch(dialogid)
	{
		case 9:
		{
			if(response)
			{
				if(isnull(inputtext) && !(100000 <= val <= 15000000))
				{
					ApplyCredit(playerid, 0);
					return SCM(playerid, -1, "Банк может выдать сумму от 100 тысяч до 15 миллион рублей.");
				}

				credit_money[playerid] = val;

				SCM(playerid, -1, "Оформление пошло дальше");
				ApplyCredit(playerid, 1);
			}
		}
		case 10:
		{
			if(response)
			{
				if(isnull(inputtext) && !(1 <= val <= 7))
				{
					ApplyCredit(playerid, 1);
					return SCM(playerid, -1, "Банк может выдать сумму только на срок от 1 до 7 дней.");
				}
				SCM(playerid, -1, "Оформление пошло дальше");
				credit_data[playerid] = val;
				GiveCredit(playerid);
			}
		}
		case 12:
		{
			new time[6];
			if(response)
			{
				if(0 <= listitem <= e_credits_loaded)
				{
					timestamp_to_date(crInfo[listitem][crSt_time], time[2], time[1], time[0], time[3], time[4], time[5]);

					static const fmt_str[] = "Заявление №%d.\n\n\
					Имя: %s\n\
					Сумма кредита: %d рублей\n\
					Дата подачи заявления: %02d.%02d.%d в %02d:%02d:%02d\n\nЧто бы одобрить кредит человеку нажмите \"Одобрить\"";

					new string[sizeof(fmt_str) + 200];
					format(string, sizeof(string), fmt_str, crInfo[listitem][crID], crInfo[listitem][crName], crInfo[listitem][crSum], time[0], time[1], time[2], time[3], time[4], time[5]);

					SPD(playerid, 13, DSM, "Информация о заявке", string, "Одобрить", "Закрыть");

					SetPVarInt(playerid, "listitem", listitem);
				}
			}
		}
		case 13:
		{
			new idx = GetPVarInt(playerid, "listitem"),
			fmt_str[105 + MAX_PLAYER_NAME + 22],
			amount = crInfo[idx][crSum],
			owner_player = GetPlayerIDBySqlID(crInfo[idx][crUid]),
			money = crInfo[idx][crAmount];
			if(response)
			{
				format(fmt_str, sizeof fmt_str, "[Информация]: Вы успешно одобрили заявление №%d на получения средств в размере %d рублей от гражданина %s", 
				crInfo[idx][crID], crInfo[idx][crSum], crInfo[idx][crName]);

				SCM(playerid, -1, fmt_str);

				if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
				{
					pInfo[owner_player][pBank] = money;
					pInfo[owner_player][pCredit] = amount;
					SCM(playerid, -1, "[Информация]: Поздравляем! Вам одобрили кредит. Деньги зачислены Вам на банковский счёт.");
				}
				
				static fmt_msg[] = "UPDATE `users` SET `Bank` = '%d', `Credit` = '%d' WHERE `ID` = '%d' LIMIT 1";

				new string[sizeof(fmt_msg)+50];

				mysql_format(dbHandle, string, sizeof(string), fmt_msg, pInfo[owner_player][pBank], amount, pInfo[playerid][pID]);

				mysql_tquery(dbHandle, string);

				DeleteCredit(crInfo[idx][crID]);

				return 1;
			}
		}
	}
	return true;
}		

stock ApplyCredit(playerid, type)
{
	if(pInfo[playerid][pLevel] < 3) return SCM(playerid, -1, !"* Взять кредит можно с 3-го уровня!");
	if(pInfo[playerid][pCredit] > 0) return SCM(playerid, -1, !"* У вас есть задолженность по кредиту, оформить ещё один нельзя!");

	if(type == 0) SPD(playerid, 9, DSI, "Оформление кредита", "Укажите сумму, которую хотите получить:", "Далее", "Отмена");
	else if(type == 1) SPD(playerid, 10, DSI, "Оформление кредита", "Укажите срок платежа, за который вы выплатите данный кредит (от 1 до 7 дней):", "Далее", "Отмена");

	return 1;
}

stock AddCreditsDataBase(playerid)
{
	new price = (credit_money[playerid] / 5), 
	money = credit_money[playerid],
	data = credit_data[playerid],
	result_money = money + price,
	end_time = (gettime() + data * 86400), 
	credit_id = e_credits_loaded;

	static query[] = "INSERT INTO `credits` (`uid`, `name`, `start_time`, `end_time`, `sum`, `amount`) VALUES ('%d', '%s', '%d', '%d', '%d', '%d')";

	new string[sizeof(query) + 46 + sizeof(end_time) + sizeof(result_money)];

	mysql_format(dbHandle, string, sizeof(string), query, pInfo[playerid][pID], pInfo[playerid][pName], gettime(), end_time, result_money, money);

	mysql_tquery(dbHandle, string);


	crInfo[credit_id][crID] = e_credits_loaded + 1;
	crInfo[credit_id][crUid] = pInfo[playerid][pID];
	SetString(crInfo[credit_id][crName], pInfo[playerid][pName]);
	crInfo[credit_id][crSt_time] = gettime();
	crInfo[credit_id][crEnd_time] = end_time;
	crInfo[credit_id][crSum] = result_money; 
	crInfo[credit_id][crAmount] = money;
	crInfo[credit_id][crStatus] = 0;

	e_credits_loaded ++;

}

stock GiveCredit(playerid)
{
	new price = (credit_money[playerid] / 5), 
	money = credit_money[playerid],
	data = credit_data[playerid],
	result_money = money + price;


	static const fmt_str[] = "Заявление успешно создано.\n\n\
	Сумма к получению: %d рублей\n\
	Срок выплаты: %d дня(ей)\n\
	Проценты: %d рублей\n\
	Сумма погашения: %d рублей\n\n\
	Деньги будут зачислены Вам на банковский счёт после одобрения заявки сотрудником банка.";

	new string[sizeof(fmt_str) + 12 + sizeof(money) + sizeof(data) + sizeof(price) + sizeof(result_money)];
	format(string, sizeof(string), fmt_str, money, data, price, result_money);

	SPD(playerid, 11, DSM, "Оформление кредита", string, "Закрыть", "");

	AddCreditsDataBase(playerid);

	return 1;
}


CMD:credit(playerid)
{
	ApplyCredit(playerid, 0);
	return 1;
}

CMD:check_credits(playerid) 
{
	new string[(11 + MAX_PLAYER_NAME + 11) * MAX_CR_INFO + 52];
	strcat(string, "Номер заявки\tИмя\tСумма\n");
	for(new i = 0; i < e_credits_loaded; i++)
	{
		format(string, sizeof(string), "%s%d\t%s\t\t%d\n", string, crInfo[i][crID], crInfo[i][crName], crInfo[i][crSum]);
	}

	SPD(playerid, 12, DIALOG_STYLE_TABLIST_HEADERS, "Список заявок", string, "Далее", "Закрыть");
	return 1;
}

stock DeleteCredit(id) 
{
	static fmt_str[] = "DELETE FROM `credits` WHERE `id` = '%d' LIMIT 1";

	new string[sizeof(fmt_str)+11];

	mysql_format(dbHandle, string, sizeof(string), fmt_str, id);
	mysql_tquery(dbHandle, string);
}


stock ShowResult(playerid) 
{
	static const fmt_str[] = "Заявка №%d.\n\n\
	Сумма к получению: %d рублей\n\
	Срок выплаты: %d дня(ей)\n\
	Проценты: %d рублей\n\
	Сумма погашения: %d рублей\n\n\
	Деньги будут зачислены Вам на банковский счёт после одобрения заявки сотрудником банка.";

	new string[sizeof(fmt_str) + 150];
	format(string, sizeof(string), fmt_str, crInfo);

	SPD(playerid, 0, DSM, "Оформление кредита", string, "Закрыть", "");

	return 1;
}
